{
	"info": {
		"_postman_id": "YOUR_COLLECTION_ID",
		"name": "ArtHub Backend API - Authentication",
		"description": "Complete and updated API collection for ArtHub authentication module.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"description": "All endpoints related to user authentication, registration, and session management.",
			"item": [
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response is successful\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Access and Refresh tokens are present\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data.accessToken).to.exist;",
									"    pm.expect(responseData.data.refreshToken).to.exist;",
									"    ",
									"    pm.collectionVariables.set(\"accessToken\", responseData.data.accessToken);",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.data.refreshToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"testuser_{{$randomInt}}@art.com\",\n  \"password\": \"Password123!\",\n  \"confirmPassword\": \"Password123!\",\n  \"displayName\": \"Test User\",\n  \"job\": \"Artist\",\n  \"role\": \"artist\",\n  \"fingerprint\": \"fp_{{$guid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Creates a new user account and returns access and refresh tokens."
					},
					"response": []
				},
				{
					"name": "Login with Email & Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is successful and contains tokens\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.success).to.be.true;",
									"    pm.expect(responseData.data.accessToken).to.exist;",
									"    pm.expect(responseData.data.refreshToken).to.exist;",
									"    ",
									"    pm.collectionVariables.set(\"accessToken\", responseData.data.accessToken);",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.data.refreshToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"Password123!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Authenticates a user and provides session tokens."
					},
					"response": []
				},
				{
					"name": "Login with Fingerprint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is successful and contains tokens\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.success).to.be.true;",
									"    pm.expect(responseData.data.accessToken).to.exist;",
									"    pm.expect(responseData.data.refreshToken).to.exist;",
									"    ",
									"    pm.collectionVariables.set(\"accessToken\", responseData.data.accessToken);",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.data.refreshToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fingerprint\": \"fp_{{$guid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login-with-fingerprint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login-with-fingerprint"
							]
						},
						"description": "Logs in a user via their registered device fingerprint."
					},
					"response": []
				},
				{
					"name": "Login with Firebase",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This request requires a valid Firebase ID token.",
									"// You need to obtain this token from your Firebase client SDK.",
									"// For testing, you can manually set 'firebaseIdToken' in the collection variables."
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is successful and contains app tokens\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.success).to.be.true;",
									"    pm.expect(responseData.data.accessToken).to.exist;",
									"    pm.expect(responseData.data.refreshToken).to.exist;",
									"    ",
									"    pm.collectionVariables.set(\"accessToken\", responseData.data.accessToken);",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.data.refreshToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{firebaseIdToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/firebase",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"firebase"
							]
						},
						"description": "Authenticates a user via a Firebase ID token and issues app-specific tokens."
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response indicates success\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.success).to.be.true;",
									"    pm.expect(responseData.message).to.include(\"تم إرسال رمز إعادة تعيين كلمة المرور\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"test@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/forgot-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"forgot-password"
							]
						},
						"description": "Initiates the password reset process by sending a code to the user's email."
					},
					"response": []
				},
				{
					"name": "Verify Forget Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response indicates success\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.success).to.be.true;",
									"    pm.expect(responseData.message).to.equal(\"تم التحقق من الرمز بنجاح\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"test@example.com\",\n  \"forgetCode\": \"1234\" // Replace with the actual code from email\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/verify-forget-code",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"verify-forget-code"
							]
						},
						"description": "Verifies the password reset code sent to the user."
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"forgetCode\": \"1234\",\n    \"password\": \"NewPassword123!\",\n    \"confirmPassword\": \"NewPassword123!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/reset-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"reset-password"
							]
						},
						"description": "Resets the user's password using the forget code."
					},
					"response": [
						{
							"name": "Reset Password Correct",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"test@example.com\",\n    \"forgetCode\": \"VALID_CODE\",\n    \"password\": \"NewPassword123!\",\n    \"confirmPassword\": \"NewPassword123!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/reset-password"
								}
							},
							"status": "OK",
							"code": 200,
							"body": "{\n    \"success\": true,\n    \"message\": \"تم تغيير كلمة المرور بنجاح\"\n}"
						},
						{
							"name": "Confirm Password",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"test@example.com\",\n    \"forgetCode\": \"VALID_CODE\",\n    \"password\": \"NewPassword123!\",\n    \"confirmPassword\": \"DIFFERENT_PASSWORD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/reset-password"
								}
							},
							"status": "Bad Request",
							"code": 400,
							"body": "{\n    \"success\": false,\n    \"message\": \"كلمة المرور وتأكيدها غير متطابقين\"\n}"
						},
						{
							"name": "Password Validation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"test@example.com\",\n    \"forgetCode\": \"VALID_CODE\",\n    \"password\": \"123\",\n    \"confirmPassword\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/reset-password"
								}
							},
							"status": "Bad Request",
							"code": 400,
							"body": "{\n    \"success\": false,\n    \"message\": \"كلمة المرور يجب أن تكون 8 أحرف على الأقل وتحتوي على حروف وأرقام\"\n}"
						}
					]
				},
				{
					"name": "Change Password From Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"oldPassword\": \"Password123!\",\n    \"newPassword\": \"NewSecurePassword456!\",\n    \"confirmPassword\": \"NewSecurePassword456!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/change-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"change-password"
							]
						},
						"description": "Allows a logged-in user to change their password from their profile."
					},
					"response": [
						{
							"name": "Must Send Token",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/change-password"
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"body": "{\n    \"success\": false,\n    \"message\": \"يجب تسجيل الدخول أولاً\"\n}"
						}
					]
				},
				{
					"name": "Get Current User",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						},
						"description": "Fetches the profile information of the currently authenticated user."
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New tokens are received\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.success).to.be.true;",
									"    pm.expect(responseData.data.accessToken).to.exist;",
									"    pm.expect(responseData.data.refreshToken).to.exist;",
									"    ",
									"    // Update collection variables with new tokens",
									"    pm.collectionVariables.set(\"accessToken\", responseData.data.accessToken);",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.data.refreshToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh-token"
							]
						},
						"description": "Provides a new access token and refresh token pair."
					},
					"response": []
				},
				{
					"name": "Update FCM Token",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fcmToken\": \"fcm_token_{{$guid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/fcm-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"fcm-token"
							]
						},
						"description": "Updates the Firebase Cloud Messaging (FCM) token for push notifications."
					},
					"response": []
				},
				{
					"name": "Update Fingerprint",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fingerprint\": \"fp_updated_{{$guid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/update-fingerprint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"update-fingerprint"
							]
						},
						"description": "Associates a new device fingerprint with the user's account."
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Clears tokens after logout\", function () {",
									"    pm.collectionVariables.unset(\"accessToken\");",
									"    pm.collectionVariables.unset(\"refreshToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						},
						"description": "Logs the user out by invalidating the current session tokens."
					},
					"response": []
				}
			]
		},
		{
			"name": "Artworks",
			"description": "All endpoints related to artwork management, creation, and retrieval.",
			"item": [
				{
					"name": "Create New Artwork (with Images)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response is successful\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Artwork data is present\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data.title).to.exist;",
									"    pm.expect(responseData.data.images).to.be.an('array');",
									"    ",
									"    // Store artwork ID for future requests",
									"    pm.collectionVariables.set(\"artworkId\", responseData.data._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "لوحة المناظر الطبيعية",
									"type": "text"
								},
								{
									"key": "description",
									"value": "لوحة جميلة تصور المناظر الطبيعية الخلابة",
									"type": "text"
								},
								{
									"key": "price",
									"value": "500",
									"type": "text"
								},
								{
									"key": "category",
									"value": "{{categoryId}}",
									"type": "text"
								},
								{
									"key": "tags[]",
									"value": "طبيعة",
									"type": "text"
								},
								{
									"key": "tags[]",
									"value": "رسم",
									"type": "text"
								},
								{
									"key": "tags[]",
									"value": "زيتي",
									"type": "text"
								},
								{
									"key": "status",
									"value": "available",
									"type": "text"
								},
								{
									"key": "isFramed",
									"value": "true",
									"type": "text"
								},
								{
									"key": "dimensions[width]",
									"value": "60",
									"type": "text"
								},
								{
									"key": "dimensions[height]",
									"value": "40",
									"type": "text"
								},
								{
									"key": "dimensions[depth]",
									"value": "2",
									"type": "text"
								},
								{
									"key": "materials[]",
									"value": "زيت على قماش",
									"type": "text"
								},
								{
									"key": "materials[]",
									"value": "أكريليك",
									"type": "text"
								},
								{
									"key": "images",
									"type": "file",
									"src": []
								},
								{
									"key": "images",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/artworks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"artworks"
							]
						},
						"description": "Creates a new artwork with uploaded images. Supports 1-10 images in JPG, PNG, GIF, WEBP formats (max 5MB each)."
					},
					"response": []
				},
				{
					"name": "Get All Artworks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/artworks?page=1&limit=10&status=available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"artworks"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "status",
									"value": "available"
								}
							]
						},
						"description": "Retrieves a paginated list of available artworks."
					},
					"response": []
				},
				{
					"name": "Get Artwork by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/artworks/{{artworkId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"artworks",
								"{{artworkId}}"
							]
						},
						"description": "Retrieves detailed information about a specific artwork."
					},
					"response": []
				},
				{
					"name": "Update Artwork",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"لوحة المناظر الطبيعية - محدثة\",\n  \"description\": \"وصف محدث للوحة\",\n  \"price\": 600,\n  \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/artworks/{{artworkId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"artworks",
								"{{artworkId}}"
							]
						},
						"description": "Updates an existing artwork (owner only)."
					},
					"response": []
				},
				{
					"name": "Delete Artwork",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/artworks/{{artworkId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"artworks",
								"{{artworkId}}"
							]
						},
						"description": "Deletes an artwork (owner only)."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "noauth"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3002",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "firebaseIdToken",
			"value": "your-firebase-id-token-here",
			"type": "string"
		},
		{
			"key": "artworkId",
			"value": "",
			"type": "string"
		},
		{
			"key": "categoryId",
			"value": "60d0fe4f5311236168a109ca",
			"type": "string"
		}
	]
} 